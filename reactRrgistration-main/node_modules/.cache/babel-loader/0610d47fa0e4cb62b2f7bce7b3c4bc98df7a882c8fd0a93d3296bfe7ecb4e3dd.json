{"ast":null,"code":"// import { useContext, createContext, useEffect, useState } from \"react\";\n\n// import {\n//   AuthErrorCodes,\n//   createUserWithEmailAndPassword,\n//   onAuthStateChanged,\n//   signInWithEmailAndPassword,\n//   GoogleAuthProvider,\n//   signInWithPopup,\n//   signInWithRedirect,\n//   signOut\n// } from \"firebase/auth\";\n// import { auth, db } from \"../firebase.config\";\n// import { addDoc, collection, doc, setDoc } from \"firebase/firestore\";\n\n// const userContext = createContext();\n\n// export const useAuth = () => {\n//   return useContext(userContext);\n// };\n\n// const UserAuthContext = ({ children }) => {\n//   const [error, setError] = useState(\"\");\n//   const [currentuser, setuser] = useState();\n\n//   const googleSignIn = () => {\n//     const provider = new GoogleAuthProvider();\n//     signInWithRedirect(auth, provider)\n//   };\n\n//   const logOut = () => {\n//     signOut(auth)\n//   }\n\n//   useEffect(() => {\n//     onAuthStateChanged(auth, (user) => {\n//       console.log(user);\n//       if (user) {\n//         setuser(user);\n//         console.log(\"u are logging\");\n//       } else {\n//         // alert(\"u are logout\")\n//       }\n//     });\n//   }, [currentuser]);\n//   // const SignUp = async (email, password, FirstName, LastName, collectionName) => {\n//   //   setError(\"\");\n//   //   const result = await createUserWithEmailAndPassword(auth, email, password)\n//       // .then(async (result) => {\n//       //   console.log(result);\n//       //   try {\n//       //     // const docRef = await addDoc(collection(db, \"users\"), {\n//       //     //   FullName,\n//       //     //   userId: `${result.user.uid}`\n//       //     // });\n//       //     const ref = doc(db, collectionName, result.user.uid); \n//       //     //const ref = doc(db, \"customerCollection\", result.user.uid);\n//       //     const docRef = await setDoc(ref, {\n//       //       FirstName,\n//       //       LastName,\n//       //       email,\n//       //       password,\n//       //     });\n//       //     alert(\"Wellcome new User create successfully\");\n//       //     console.log(\"Document written with ID: \", docRef.id);\n//       //   } catch (e) {\n//       //     console.error(\"Error adding document: \", e);\n//       //   }\n//       // })\n//       // .catch((err) => {\n//       //   if (err.code === \"auth/email-already-in-use\") {\n//       //     setInterval(() => {\n//       //       setError(\"\");\n//       //     }, 5000);\n//       //     setError(\"email already in use try another email\");\n//       //   } else if (err.code === AuthErrorCodes.WEAK_PASSWORD) {\n//       //     setInterval(() => {\n//       //       setError(\"\");\n//       //     }, 5000);\n//       //     setError(\"Password Must be 6 charecter\");\n//       //   } else {\n//       //     setError(err.message);\n//       //   }\n//       // });\n//   //};\n\n//   const SignUp = async (email, password, FirstName, LastName, collectionName) => {\n//     setError(\"\");\n//     try {\n//       const result = await createUserWithEmailAndPassword(auth, email, password);\n//       console.log(result);\n\n//       const userDocRef = doc(db, collectionName, result.user.uid);\n//       await setDoc(userDocRef, {\n//         FirstName,\n//         LastName,\n//         email,\n//         password,\n//       });\n\n//       alert(\"Welcome! New user created successfully\");\n//       console.log(\"Document written with ID: \", userDocRef.id);\n//     } catch (error) {\n//       if (error.code === \"auth/email-already-in-use\") {\n//         setError(\"Email already in use. Please try another email.\");\n//       } else if (error.code === AuthErrorCodes.WEAK_PASSWORD) {\n//         setError(\"Password must be at least 6 characters long.\");\n//       } else {\n//         setError(error.message);\n//       }\n//     }\n//   };\n\n//   const SignIn = async (email, password) => {\n//     setError(\"\"); // Clear previous errors\n//     try {\n//       const userCredential = await signInWithEmailAndPassword(auth, email, password);\n//       const user = userCredential.user;\n//       console.log(\"Login successful:\", user.uid);\n//       alert(\"Login successful\");\n//       // You can redirect to the home page here if needed\n//     } catch (signInError) {\n//       setError(signInError.message);\n//     }\n//   };\n//   const value = {\n//     SignUp,\n//     SignIn,\n//     error,\n//     currentuser,\n//   };\n\n//   return <userContext.Provider value={{value, googleSignIn}}>{children}</userContext.Provider>;\n// };\n\n// export default UserAuthContext;","map":{"version":3,"names":[],"sources":["C:/Users/sandu/OneDrive/Desktop/2nd year 2nd semester/IN2900 Industry Based Project/react/trulymittal_react-firebase-auth/reactRrgistration-main/src/context/UserAuthContext.js"],"sourcesContent":["// import { useContext, createContext, useEffect, useState } from \"react\";\r\n\r\n// import {\r\n//   AuthErrorCodes,\r\n//   createUserWithEmailAndPassword,\r\n//   onAuthStateChanged,\r\n//   signInWithEmailAndPassword,\r\n//   GoogleAuthProvider,\r\n//   signInWithPopup,\r\n//   signInWithRedirect,\r\n//   signOut\r\n// } from \"firebase/auth\";\r\n// import { auth, db } from \"../firebase.config\";\r\n// import { addDoc, collection, doc, setDoc } from \"firebase/firestore\";\r\n\r\n// const userContext = createContext();\r\n\r\n\r\n// export const useAuth = () => {\r\n//   return useContext(userContext);\r\n// };\r\n\r\n// const UserAuthContext = ({ children }) => {\r\n//   const [error, setError] = useState(\"\");\r\n//   const [currentuser, setuser] = useState();\r\n\r\n//   const googleSignIn = () => {\r\n//     const provider = new GoogleAuthProvider();\r\n//     signInWithRedirect(auth, provider)\r\n//   };\r\n\r\n//   const logOut = () => {\r\n//     signOut(auth)\r\n//   }\r\n\r\n//   useEffect(() => {\r\n//     onAuthStateChanged(auth, (user) => {\r\n//       console.log(user);\r\n//       if (user) {\r\n//         setuser(user);\r\n//         console.log(\"u are logging\");\r\n//       } else {\r\n//         // alert(\"u are logout\")\r\n//       }\r\n//     });\r\n//   }, [currentuser]);\r\n//   // const SignUp = async (email, password, FirstName, LastName, collectionName) => {\r\n//   //   setError(\"\");\r\n//   //   const result = await createUserWithEmailAndPassword(auth, email, password)\r\n//       // .then(async (result) => {\r\n//       //   console.log(result);\r\n//       //   try {\r\n//       //     // const docRef = await addDoc(collection(db, \"users\"), {\r\n//       //     //   FullName,\r\n//       //     //   userId: `${result.user.uid}`\r\n//       //     // });\r\n//       //     const ref = doc(db, collectionName, result.user.uid); \r\n//       //     //const ref = doc(db, \"customerCollection\", result.user.uid);\r\n//       //     const docRef = await setDoc(ref, {\r\n//       //       FirstName,\r\n//       //       LastName,\r\n//       //       email,\r\n//       //       password,\r\n//       //     });\r\n//       //     alert(\"Wellcome new User create successfully\");\r\n//       //     console.log(\"Document written with ID: \", docRef.id);\r\n//       //   } catch (e) {\r\n//       //     console.error(\"Error adding document: \", e);\r\n//       //   }\r\n//       // })\r\n//       // .catch((err) => {\r\n//       //   if (err.code === \"auth/email-already-in-use\") {\r\n//       //     setInterval(() => {\r\n//       //       setError(\"\");\r\n//       //     }, 5000);\r\n//       //     setError(\"email already in use try another email\");\r\n//       //   } else if (err.code === AuthErrorCodes.WEAK_PASSWORD) {\r\n//       //     setInterval(() => {\r\n//       //       setError(\"\");\r\n//       //     }, 5000);\r\n//       //     setError(\"Password Must be 6 charecter\");\r\n//       //   } else {\r\n//       //     setError(err.message);\r\n//       //   }\r\n//       // });\r\n//   //};\r\n\r\n//   const SignUp = async (email, password, FirstName, LastName, collectionName) => {\r\n//     setError(\"\");\r\n//     try {\r\n//       const result = await createUserWithEmailAndPassword(auth, email, password);\r\n//       console.log(result);\r\n  \r\n//       const userDocRef = doc(db, collectionName, result.user.uid);\r\n//       await setDoc(userDocRef, {\r\n//         FirstName,\r\n//         LastName,\r\n//         email,\r\n//         password,\r\n//       });\r\n  \r\n//       alert(\"Welcome! New user created successfully\");\r\n//       console.log(\"Document written with ID: \", userDocRef.id);\r\n//     } catch (error) {\r\n//       if (error.code === \"auth/email-already-in-use\") {\r\n//         setError(\"Email already in use. Please try another email.\");\r\n//       } else if (error.code === AuthErrorCodes.WEAK_PASSWORD) {\r\n//         setError(\"Password must be at least 6 characters long.\");\r\n//       } else {\r\n//         setError(error.message);\r\n//       }\r\n//     }\r\n//   };\r\n  \r\n\r\n//   const SignIn = async (email, password) => {\r\n//     setError(\"\"); // Clear previous errors\r\n//     try {\r\n//       const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n//       const user = userCredential.user;\r\n//       console.log(\"Login successful:\", user.uid);\r\n//       alert(\"Login successful\");\r\n//       // You can redirect to the home page here if needed\r\n//     } catch (signInError) {\r\n//       setError(signInError.message);\r\n//     }\r\n//   };\r\n//   const value = {\r\n//     SignUp,\r\n//     SignIn,\r\n//     error,\r\n//     currentuser,\r\n//   };\r\n \r\n//   return <userContext.Provider value={{value, googleSignIn}}>{children}</userContext.Provider>;\r\n// };\r\n\r\n// export default UserAuthContext;\r\n\r\n\r\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}